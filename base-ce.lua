local codeEditorInfos = [[
sysCall_info()
sysCall_thread()
sysCall_init()
sysCall_cleanup()
sysCall_nonSimulation()
sysCall_beforeMainScript()
sysCall_beforeSimulation()
sysCall_afterSimulation()
sysCall_actuation()
sysCall_sensing()
sysCall_suspended()
sysCall_suspend()
sysCall_resume()
sysCall_beforeInstanceSwitch()
sysCall_afterInstanceSwitch()
sysCall_beforeCopy()
sysCall_afterCopy()
sysCall_beforeDelete()
sysCall_afterDelete()
sysCall_afterCreate()
sysCall_joint()
sysCall_vision()
sysCall_userConfig()
sysCall_moduleEntry()
sysCall_trigger()
sysCall_contact()
sysCall_dyn()
sysCall_event()
sysCall_ext()
sysCall_realTimeIdle()
sysCall_beforeSave()
sysCall_afterSave()
sysCall_msg()
sysCall_selChange()
sysCall_data()
quit()
exit()
any value = rawget(table t, any index)
table t = rawset(table t, any key, any value)
any module = require(string name)
any module = require(int scriptHandle)
function iterator = pairs(table t)
function iterator = ipairs(table t)
any index, any value = next(table t, any previousIndex)
bool status, any errOrRet, ... = pcall(function f)
bool status, any errOrRet, ... = xpcall(function f)
any metatable = getmetatable(table t)
table t = setmetatable(table t, any metatable)
error(string message)
assert(bool condition, string errorMessage)
coroutine.create(...)
coroutine.resume(...)
coroutine.status(...)
coroutine.wrap(...)
coroutine.yield(...)
io.close(...)
io.flush(...)
io.input(...)
io.lines(...)
io.open(...)
io.output(...)
io.read(...)
io.tmpfile(...)
io.type(...)
io.write(...)
io.stdin(...)
io.stdout(...)
io.stderr(...)
os.clock(...)
os.date(...)
os.difftime(...)
os.execute(...)
os.exit(...)
os.getenv(...)
os.remove(...)
os.rename(...)
os.setlocale(...)
os.time(...)
os.tmpname(...)
debug.debug(...)
debug.gethook(...)
debug.getinfo(...)
debug.getlocal(...)
debug.getmetatable(...)
debug.getregistry(...)
debug.getupvalue(...)
debug.getuservalue(...)
debug.sethook(...)
debug.setlocal(...)
debug.setmetatable(...)
debug.setupvalue(...)
debug.setuservalue(...)
debug.traceback(...)
debug.upvalueid(...)
debug.upvaluejoin(...)
]]
registerCodeEditorInfos("", codeEditorInfos)
