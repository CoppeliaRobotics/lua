registerCodeEditorInfos('functional', [[
table t = functional.range(int to)
table t = functional.range(int from, int to)
table t = functional.range(int from, int to, int step)
table ft = functional.map(function f, table t, ...)
any v = functional.reduce(function f, table t, any initial)
table ft = functional.filter(function f, table t)
functional.foreach(function f, ...)
any v = functional.identity(any v)
table tz = functional.zip(table t1, table t2, ...)
function nf = functional.negate(function f)
... = functional.apply(function f, ...)
function pf = functional.partial(function f, ...)
bool b = functional.any(function f, table t)
bool b = functional.all(function f, table t)
function iterFunc = functional.iter(table t)
string funcName = functional.reify(function f, string name)
number y = functional.operator.add(number a, number b)
number y = functional.operator.sub(number a, number b)
number y = functional.operator.mul(number a, number b)
number y = functional.operator.div(number a, number b)
number y = functional.operator.mod(number a, number b)
number y = functional.operator.idiv(number a, number b)
number y = functional.operator.pow(number a, number b)
number y = functional.operator.land(number a, number b)
number y = functional.operator.lor(number a, number b)
number y = functional.operator.lxor(number a, number b)
number y = functional.operator.lshl(number a, number b)
number y = functional.operator.lshr(number a, number b)
bool b = functional.operator.eq(number a, number b)
bool b = functional.operator.neq(number a, number b)
bool b = functional.operator.gt(number a, number b)
bool b = functional.operator.ge(number a, number b)
bool b = functional.operator.lt(number a, number b)
bool b = functional.operator.le(number a, number b)
number s = functional.sum(table t)
number p = functional.prod(table t)
]])
