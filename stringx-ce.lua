registerCodeEditorInfos('stringx', [[
int ch, ... = string.byte(string s, int i = 1, int j = i)
table t = string.bytes(string s)
string t = string.capitalize(string s)
string s = string.char(int c, ...)
table t = string.chars(string s)
string s = string.dump(function f, bool strip = false)
bool b = string.endswith(string s, string suffix)
string t = string.escapehtml(string s, table opts = {entities = true})
string t = string.escpat(string s)
int i, int j = string.find(string text, string pattern, int splitStart, bool plain)
string s = string.format(string fmt, ...)
function iterator = string.gmatch(string s, string pattern)
function iterator = string.gsplit(string text, string pattern, bool plain)
string t = string.gsub(string s, string pattern, string repl, int n = nil)
bool b = string.isalnum(string s)
bool b = string.isalpha(string s)
bool b = string.isidentifier(string s)
bool b = string.islower(string s)
bool b = string.isnumeric(string s)
bool b = string.isprintable(string s)
bool b = string.isspace(string s)
bool b = string.isupper(string s)
int n = string.len(string s)
string t = string.lower(string s)
string t = string.ltrim(string s)
string m = string.match(string s, string pattern, int init = 1)
string t = string.pack(string fmt, ...)
int n = string.packsize(string fmt)
table t = string.qsplit(string s, string pattern)
string t = string.rep(string s, int n, string sep = '')
string rev = string.reverse(string s)
string t = string.rtrim(string s)
table t = string.split(string text, string pattern, bool plain)
bool b = string.startswith(string s, string prefix)
table t = string.stripmarkdown(string s, table opts = {keeplinks = false})
string t = string.sub(string s, int start, int end)
string t = string.trim(string s)
... = string.unpack(string fmt, string s, int pos = 1)
string t = string.upper(string s)
]])
